"""API router for summarisation tasks.

This router exposes endpoints that allow clients to request summaries of
documents or free‑text queries.  In a production system, these
operations would call into agent classes and language models to
generate concise, citation‑backed summaries.  Here we provide a simple
placeholder implementation.
"""

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel

# Import the service from the parent package's services module.  We go up two
# levels (from api/v1 to app) to find the services package.
from ...services import summarization_service


router = APIRouter()


class SummariseRequest(BaseModel):
    """Request body for the summarisation endpoint.

    Attributes
    ----------
    text : str
        The raw text or identifier of the document to summarise.
    """

    text: str


class SummariseResponse(BaseModel):
    """Response body for the summarisation endpoint.

    Attributes
    ----------
    summary : str
        A short summary generated by the system.
    references : list[str]
        A list of citation identifiers supporting the summary.
    """

    summary: str
    references: list[str]


@router.post("/summarise", response_model=SummariseResponse)
async def summarise(request: SummariseRequest) -> SummariseResponse:
    """Summarise a piece of text or document.

    Parameters
    ----------
    request : SummariseRequest
        The request body containing the text to summarise.

    Returns
    -------
    SummariseResponse
        The generated summary and references.
    """
    try:
        result = summarization_service.summarise_text(request.text)
        return SummariseResponse(**result)
    except Exception as exc:  # pragma: no cover - placeholder
        raise HTTPException(status_code=500, detail=str(exc))
