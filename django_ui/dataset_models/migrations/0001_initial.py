# Generated by Django 5.2.4 on 2025-08-04 01:36

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Dataset",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "dataset_type",
                    models.CharField(
                        choices=[
                            ("image", "Image Dataset"),
                            ("text", "Text Dataset"),
                            ("audio", "Audio Dataset"),
                            ("video", "Video Dataset"),
                            ("tabular", "Tabular Dataset"),
                            ("time_series", "Time Series"),
                            ("graph", "Graph Dataset"),
                            ("multimodal", "Multimodal Dataset"),
                        ],
                        max_length=20,
                    ),
                ),
                ("source_url", models.URLField(blank=True)),
                ("download_url", models.URLField(blank=True)),
                ("paper_url", models.URLField(blank=True)),
                ("github_url", models.URLField(blank=True)),
                (
                    "size_mb",
                    models.FloatField(
                        blank=True, help_text="Dataset size in MB", null=True
                    ),
                ),
                ("num_samples", models.IntegerField(blank=True, null=True)),
                ("num_classes", models.IntegerField(blank=True, null=True)),
                (
                    "license_type",
                    models.CharField(
                        choices=[
                            ("public", "Public Domain"),
                            ("mit", "MIT License"),
                            ("apache", "Apache 2.0"),
                            ("gpl", "GPL License"),
                            ("cc", "Creative Commons"),
                            ("commercial", "Commercial"),
                            ("restricted", "Restricted Use"),
                        ],
                        default="public",
                        max_length=20,
                    ),
                ),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("keywords", models.JSONField(blank=True, default=list)),
                ("download_count", models.IntegerField(default=0)),
                ("citation_count", models.IntegerField(default=0)),
                ("star_count", models.IntegerField(default=0)),
                ("authors", models.JSONField(blank=True, default=list)),
                ("publication_year", models.IntegerField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-citation_count", "-download_count", "name"],
            },
        ),
        migrations.CreateModel(
            name="ResearchField",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "parent_field",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dataset_models.researchfield",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="MLModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "model_type",
                    models.CharField(
                        choices=[
                            ("classification", "Classification"),
                            ("regression", "Regression"),
                            ("detection", "Object Detection"),
                            ("segmentation", "Segmentation"),
                            ("nlp", "Natural Language Processing"),
                            ("generation", "Generative Model"),
                            ("recommendation", "Recommendation"),
                            ("clustering", "Clustering"),
                            ("reinforcement", "Reinforcement Learning"),
                            ("multimodal", "Multimodal"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "framework",
                    models.CharField(
                        choices=[
                            ("pytorch", "PyTorch"),
                            ("tensorflow", "TensorFlow"),
                            ("keras", "Keras"),
                            ("scikit", "Scikit-learn"),
                            ("huggingface", "Hugging Face"),
                            ("onnx", "ONNX"),
                            ("jax", "JAX"),
                            ("mxnet", "MXNet"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("architecture", models.CharField(blank=True, max_length=100)),
                ("model_url", models.URLField(blank=True)),
                ("paper_url", models.URLField(blank=True)),
                ("github_url", models.URLField(blank=True)),
                ("huggingface_url", models.URLField(blank=True)),
                ("accuracy", models.FloatField(blank=True, null=True)),
                ("f1_score", models.FloatField(blank=True, null=True)),
                ("precision", models.FloatField(blank=True, null=True)),
                ("recall", models.FloatField(blank=True, null=True)),
                ("num_parameters", models.BigIntegerField(blank=True, null=True)),
                ("model_size_mb", models.FloatField(blank=True, null=True)),
                ("inference_time_ms", models.FloatField(blank=True, null=True)),
                ("pretrained", models.BooleanField(default=False)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                ("requirements", models.JSONField(blank=True, default=list)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("keywords", models.JSONField(blank=True, default=list)),
                ("download_count", models.IntegerField(default=0)),
                ("citation_count", models.IntegerField(default=0)),
                ("star_count", models.IntegerField(default=0)),
                ("authors", models.JSONField(blank=True, default=list)),
                ("publication_year", models.IntegerField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "training_datasets",
                    models.ManyToManyField(
                        blank=True,
                        related_name="trained_models",
                        to="dataset_models.dataset",
                    ),
                ),
                (
                    "research_fields",
                    models.ManyToManyField(
                        related_name="models", to="dataset_models.researchfield"
                    ),
                ),
            ],
            options={
                "ordering": ["-citation_count", "-download_count", "name"],
            },
        ),
        migrations.AddField(
            model_name="dataset",
            name="research_fields",
            field=models.ManyToManyField(
                related_name="datasets", to="dataset_models.researchfield"
            ),
        ),
        migrations.CreateModel(
            name="SearchHistory",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "search_type",
                    models.CharField(
                        choices=[
                            ("dataset", "Dataset Search"),
                            ("model", "Model Search"),
                            ("combined", "Combined Search"),
                        ],
                        max_length=20,
                    ),
                ),
                ("query", models.CharField(max_length=500)),
                ("filters", models.JSONField(blank=True, default=dict)),
                ("results_count", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "research_field",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="dataset_models.researchfield",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
    ]
