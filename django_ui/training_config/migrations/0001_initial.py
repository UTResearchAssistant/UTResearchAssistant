# Generated by Django 5.2.4 on 2025-08-04 01:57

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AdapterConfiguration",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "adapter_type",
                    models.CharField(
                        choices=[
                            ("LORA", "LoRA (Low-Rank Adaptation)"),
                            ("PREFIX", "Prefix Tuning"),
                            ("PROMPT", "Prompt Tuning"),
                            ("ADAPTER", "Adapter Layers"),
                            ("NONE", "Full Fine-tuning"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "lora_rank",
                    models.IntegerField(
                        blank=True,
                        help_text="LoRA rank (r)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(512),
                        ],
                    ),
                ),
                (
                    "lora_alpha",
                    models.IntegerField(
                        blank=True,
                        help_text="LoRA alpha scaling",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(1024),
                        ],
                    ),
                ),
                (
                    "lora_dropout",
                    models.FloatField(
                        blank=True,
                        help_text="LoRA dropout rate",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(0.5),
                        ],
                    ),
                ),
                (
                    "target_modules",
                    models.JSONField(
                        default=list,
                        help_text="Target modules for adaptation (e.g., ['q_proj', 'v_proj'])",
                    ),
                ),
                (
                    "flops_overhead_per_token",
                    models.BigIntegerField(
                        default=0,
                        help_text="Additional FLOPs per token for this adapter",
                    ),
                ),
                (
                    "memory_overhead_gb",
                    models.FloatField(
                        default=0.0, help_text="Additional memory overhead in GB"
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="BaseModelProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "model_type",
                    models.CharField(
                        choices=[
                            ("TRANSFORMER", "Transformer (GPT/BERT-like)"),
                            ("LLAMA", "LLaMA Family"),
                            ("FALCON", "Falcon"),
                            ("MISTRAL", "Mistral"),
                            ("CUSTOM", "Custom Architecture"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "parameter_count",
                    models.BigIntegerField(help_text="Total parameters"),
                ),
                (
                    "context_length",
                    models.IntegerField(help_text="Maximum context length"),
                ),
                ("vocab_size", models.IntegerField(help_text="Vocabulary size")),
                (
                    "flops_per_token",
                    models.BigIntegerField(
                        help_text="FLOPs required per token during training"
                    ),
                ),
                (
                    "memory_footprint_gb",
                    models.FloatField(help_text="Memory footprint in GB"),
                ),
                ("supports_lora", models.BooleanField(default=True)),
                ("supports_prefix_tuning", models.BooleanField(default=False)),
                (
                    "supported_precisions",
                    models.JSONField(
                        default=list, help_text="List of supported precisions"
                    ),
                ),
                (
                    "hf_model_name",
                    models.CharField(
                        blank=True,
                        help_text="HuggingFace model identifier",
                        max_length=200,
                    ),
                ),
                ("hf_requires_auth", models.BooleanField(default=False)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DatasetProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "dataset_type",
                    models.CharField(
                        choices=[
                            ("TEXT", "Text/Language"),
                            ("IMAGE", "Image"),
                            ("MULTIMODAL", "Multimodal"),
                            ("AUDIO", "Audio"),
                            ("VIDEO", "Video"),
                            ("CUSTOM", "Custom"),
                        ],
                        max_length=20,
                    ),
                ),
                ("num_examples", models.IntegerField(help_text="Number of examples")),
                (
                    "avg_tokens_per_example",
                    models.IntegerField(help_text="Average tokens per example"),
                ),
                (
                    "total_tokens",
                    models.BigIntegerField(help_text="Total tokens in dataset"),
                ),
                ("size_gb", models.FloatField(help_text="Dataset size on disk in GB")),
                (
                    "hf_dataset_name",
                    models.CharField(
                        blank=True,
                        help_text="HuggingFace dataset identifier",
                        max_length=200,
                    ),
                ),
                ("hf_config_name", models.CharField(blank=True, max_length=100)),
                ("hf_split", models.CharField(default="train", max_length=50)),
                ("hf_requires_auth", models.BooleanField(default=False)),
                ("preprocessing_notes", models.TextField(blank=True)),
                ("requires_tokenization", models.BooleanField(default=True)),
                ("requires_truncation", models.BooleanField(default=True)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="HardwareProfile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "device_type",
                    models.CharField(
                        choices=[
                            ("A100", "NVIDIA A100 80GB"),
                            ("V100", "NVIDIA V100 32GB"),
                            ("RTX4090", "NVIDIA RTX 4090 24GB"),
                            ("RTX3090", "NVIDIA RTX 3090 24GB"),
                            ("H100", "NVIDIA H100 80GB"),
                            ("TPU_V4", "Google TPU v4"),
                            ("TPU_V5", "Google TPU v5"),
                            ("CUSTOM", "Custom Hardware"),
                        ],
                        max_length=20,
                    ),
                ),
                ("memory_gb", models.FloatField(help_text="Available memory in GB")),
                (
                    "compute_capability",
                    models.CharField(
                        blank=True, help_text="CUDA compute capability", max_length=10
                    ),
                ),
                ("fp16_tflops", models.FloatField(help_text="FP16 TFLOPs throughput")),
                ("fp32_tflops", models.FloatField(help_text="FP32 TFLOPs throughput")),
                (
                    "bf16_tflops",
                    models.FloatField(
                        blank=True, help_text="BF16 TFLOPs throughput", null=True
                    ),
                ),
                (
                    "cost_per_hour",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Cost per GPU hour in USD",
                        max_digits=10,
                    ),
                ),
                (
                    "utilization_factor",
                    models.FloatField(
                        default=0.75,
                        help_text="Practical efficiency factor (0.1-1.0)",
                        validators=[
                            django.core.validators.MinValueValidator(0.1),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TrainingConfiguration",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("learning_rate", models.FloatField(default=5e-05)),
                ("batch_size", models.IntegerField(default=32)),
                ("epochs", models.IntegerField(default=3)),
                ("gradient_accumulation_steps", models.IntegerField(default=1)),
                ("weight_decay", models.FloatField(default=0.01)),
                ("warmup_steps", models.IntegerField(default=100)),
                ("max_grad_norm", models.FloatField(default=1.0)),
                (
                    "optimizer",
                    models.CharField(
                        choices=[
                            ("ADAMW", "AdamW"),
                            ("ADAM", "Adam"),
                            ("SGD", "SGD"),
                            ("RMSPROP", "RMSprop"),
                        ],
                        default="ADAMW",
                        max_length=20,
                    ),
                ),
                (
                    "precision",
                    models.CharField(
                        choices=[("FP32", "FP32"), ("FP16", "FP16"), ("BF16", "BF16")],
                        default="FP16",
                        max_length=10,
                    ),
                ),
                ("save_steps", models.IntegerField(default=500)),
                ("eval_steps", models.IntegerField(default=500)),
                ("early_stopping_patience", models.IntegerField(default=3)),
                ("estimated_time_hours", models.FloatField(blank=True, null=True)),
                (
                    "estimated_cost_usd",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("estimated_gpu_hours", models.FloatField(blank=True, null=True)),
                (
                    "estimated_total_flops",
                    models.BigIntegerField(blank=True, null=True),
                ),
                ("actual_time_hours", models.FloatField(blank=True, null=True)),
                (
                    "actual_cost_usd",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("final_train_loss", models.FloatField(blank=True, null=True)),
                ("final_val_loss", models.FloatField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("ESTIMATED", "Estimated"),
                            ("RUNNING", "Running"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                        ],
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "adapter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="training_config.adapterconfiguration",
                    ),
                ),
                (
                    "base_model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="training_config.basemodelprofile",
                    ),
                ),
                (
                    "dataset",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="training_config.datasetprofile",
                    ),
                ),
                (
                    "hardware",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="training_config.hardwareprofile",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ConfigurationComparison",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("comparison_notes", models.TextField(blank=True)),
                (
                    "pareto_analysis",
                    models.JSONField(
                        default=dict, help_text="Pareto front analysis results"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "configurations",
                    models.ManyToManyField(to="training_config.trainingconfiguration"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TrainingExperiment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True)),
                (
                    "training_logs",
                    models.JSONField(
                        default=dict, help_text="Training loss per step/epoch"
                    ),
                ),
                (
                    "validation_logs",
                    models.JSONField(
                        default=dict, help_text="Validation metrics per evaluation"
                    ),
                ),
                ("best_val_loss", models.FloatField(blank=True, null=True)),
                ("convergence_epoch", models.IntegerField(blank=True, null=True)),
                ("total_steps", models.IntegerField(blank=True, null=True)),
                (
                    "model_path",
                    models.CharField(
                        blank=True, help_text="Path to saved model", max_length=500
                    ),
                ),
                (
                    "report_path",
                    models.CharField(
                        blank=True, help_text="Path to generated report", max_length=500
                    ),
                ),
                ("performance_notes", models.TextField(blank=True)),
                (
                    "recommendations",
                    models.JSONField(
                        default=list, help_text="Automated recommendations"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "configuration",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="training_config.trainingconfiguration",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
    ]
